import pandas as pd
import os

def transform_data_dynamic(df, row_index_data, name_column):
    """
    Transforme un DataFrame en un format de s√©rie temporelle en se basant sur la ligne de donn√©es sp√©cifi√©e.

    Args:
        df (pd.DataFrame): Le DataFrame d'entr√©e sans en-t√™te.
        row_index_data (int): L'index de la ligne qui contient les donn√©es √† transformer.
        name_column (str): Le nom souhait√© pour la colonne des valeurs.

    Returns:
        pd.DataFrame: Un DataFrame transform√© avec les colonnes 'Date' et la colonne des valeurs.
    """
    if row_index_data >= len(df):
        raise IndexError(f"L'index de ligne {row_index_data} est hors des limites du DataFrame. Le nombre maximum de lignes est {len(df) - 1}.")
    
    # S√©lectionner les dates dans la premi√®re ligne
    dates_row = df.iloc[0]
    
    # S√©lectionner les valeurs de la ligne sp√©cifi√©e par l'utilisateur
    data_row = df.iloc[row_index_data]
    
    # Cr√©er le DataFrame final
    transformed_df = pd.DataFrame({
        'Date': dates_row,
        name_column: data_row
    }).reset_index(drop=True)
    
    # Exclure les deux premi√®res cellules qui ne sont pas des dates ou des valeurs
    transformed_df = transformed_df.iloc[2:].copy()
    
    # Convertir les valeurs en num√©rique
    transformed_df[name_column] = pd.to_numeric(transformed_df[name_column], errors='coerce')

    # Convertir les dates, on garde la logique de remplacement des mois
    month_map = {
        'JAN': '01', 'FEV': '02', 'MAR': '03', 'AVR': '04', 'MAY': '05', 'JUN': '06',
        'JUL': '07', 'AUG': '08', 'SEP': '09', 'OCT': '10', 'NOV': '11', 'DEC': '12'
    }
    
    df_dates = transformed_df['Date'].astype(str).str.upper()
    for month_name, month_num in month_map.items():
        df_dates = df_dates.str.replace(month_name, month_num, regex=False)

    transformed_df['Date'] = pd.to_datetime(df_dates.str[-4:] + '-' + df_dates.str[:2] + '-01', errors='coerce')

    # Nettoyage et tri
    transformed_df.dropna(subset=['Date', name_column], inplace=True)
    transformed_df.sort_values(by='Date', inplace=True)
    
    return transformed_df.reset_index(drop=True)

if __name__ == "__main__":
    print("Bienvenue dans le programme de transformation de donn√©es ! üòä")
    
    while True:
        file_path = input("Veuillez entrer le chemin du fichier Excel (.xlsx ou .xls) : ")
        if not os.path.exists(file_path):
            print(f"Erreur : Le fichier '{file_path}' n'a pas √©t√© trouv√©. Veuillez r√©essayer.")
            continue
            
        try:
            # Lire le fichier sans en-t√™te
            df = pd.read_excel(file_path, header=None)
            
            # Afficher les 5 premi√®res lignes pour aider l'utilisateur
            print("\nVoici un aper√ßu des 5 premi√®res lignes du fichier :")
            print(df.head())
            
            # Demander √† l'utilisateur de sp√©cifier les lignes
            row_index_dates = int(input("\nEntrez le num√©ro de la ligne qui contient les dates (commence √† 0) : "))
            row_index_data = int(input("Entrez le num√©ro de la ligne qui contient les valeurs √† extraire : "))
            name_column = input("Entrez le nom souhait√© pour la colonne des valeurs (par exemple, 'Taux de change') : ")
            
            # Appeler la fonction de transformation
            # On utilise le code pr√©c√©dent mais on passe l'index des lignes
            # et le nom de la colonne
            # Remarque: Je me suis bas√© sur un format o√π les dates sont sur la ligne 0
            # et les donn√©es sur une autre ligne. Le code est adapt√© pour cette structure.
            transformed_df = transform_data_dynamic(df, row_index_data, name_column)
            
            output_file = f"transformed_data_{name_column}.xlsx"
            transformed_df.to_excel(output_file, index=False)
            
            print("\nTransformation r√©ussie ! üéâ")
            print(f"Les donn√©es transform√©es ont √©t√© sauvegard√©es dans '{output_file}'.")
            print("\nAper√ßu des donn√©es transform√©es :")
            print(transformed_df.head())
            break
        
        except ValueError as ve:
            print(f"Erreur de saisie : {ve}")
        except FileNotFoundError:
            print(f"Erreur : Le fichier '{file_path}' n'a pas √©t√© trouv√©. V√©rifiez le chemin et r√©essayez.")
        except Exception as e:
            print(f"Une erreur inattendue est survenue : {e}")